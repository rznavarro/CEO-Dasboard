import React, { useState, useEffect } from 'react';
import { Dashboard } from './components/Dashboard';
import { PropertyInvestmentForm } from './components/PropertyInvestmentForm';
import { LoginScreen } from './components/LoginScreen';
import { saveFormDataToSupabase, getInvestorData, saveAnalysisData } from './lib/api';

interface FormData {
  investorInfo: {
    fullName: string;
    experienceYears: string;
    primaryMarket: string;
    mainObjective: 'cash_flow' | 'appreciation' | 'both';
  };
  properties: any[];
  goalsAndPriorities: {
    noiTarget: string;
    availableCapital: string;
    mainPriority: string;
  };
  marketInfo: {
    avgRent1BR: string;
    avgRent2BR: string;
    avgRent3BR: string;
    currentInterestRate: string;
  };
}

type AppScreen = 'login' | 'form' | 'dashboard';

function App() {
  const [currentScreen, setCurrentScreen] = useState<AppScreen>('login');
  const [formData, setFormData] = useState<FormData | null>(null);

  // Check initial state on app start
  useEffect(() => {
    const loadData = async () => {
      const loggedIn = localStorage.getItem('portfolio_ceo_logged_in') === 'true';
      const savedInvestorId = localStorage.getItem('portfolio_ceo_investor_id');
      const savedFormData = localStorage.getItem('portfolio_ceo_form_data');
      const isFirstTime = localStorage.getItem('portfolio_ceo_first_time') !== 'false';

      if (!loggedIn) {
        setCurrentScreen('login');
        return;
      }

      // Try to load from Supabase first if we have an investor ID
      if (savedInvestorId && !isFirstTime) {
        try {
          const supabaseData = await getInvestorData(savedInvestorId);
          if (supabaseData) {
            // Merge with localStorage data if available
            const localData = savedFormData ? JSON.parse(savedFormData) : {};
            const mergedData = {
              ...supabaseData,
              ...localData,
              investorId: savedInvestorId
            };
            setFormData(mergedData);
            setCurrentScreen('dashboard');
            return;
          }
        } catch (error) {
          console.error('Error loading from Supabase:', error);
        }
      }

      // Fallback to localStorage
      if (isFirstTime || !savedFormData) {
        setCurrentScreen('form');
      } else {
        try {
          const parsedData = JSON.parse(savedFormData);
          setFormData(parsedData);
          setCurrentScreen('dashboard');
        } catch (error) {
          console.error('Error parsing saved form data:', error);
          setCurrentScreen('form');
        }
      }
    };

    loadData();
  }, []);

  const handleLogin = () => {
    localStorage.setItem('portfolio_ceo_logged_in', 'true');

    // Check if user has completed the form before
    const savedFormData = localStorage.getItem('portfolio_ceo_form_data');
    const isFirstTime = localStorage.getItem('portfolio_ceo_first_time') !== 'false';

    if (isFirstTime || !savedFormData) {
      setCurrentScreen('form');
    } else {
      // Load saved data and go to dashboard
      try {
        const parsedData = JSON.parse(savedFormData);
        setFormData(parsedData);
        setCurrentScreen('dashboard');
      } catch (error) {
        console.error('Error parsing saved form data:', error);
        setCurrentScreen('form'); // If parsing fails, show form
      }
    }
  };

  const handleFormSubmit = async (data: FormData) => {
    try {
      // Save form data to Supabase
      const saveResult = await saveFormDataToSupabase(data);

      if (!saveResult.success) {
        console.error('Error saving to Supabase:', saveResult.error);
        // Fallback to localStorage if Supabase fails
        setFormData(data);
        setCurrentScreen('dashboard');
        localStorage.setItem('portfolio_ceo_form_data', JSON.stringify(data));
        localStorage.setItem('portfolio_ceo_first_time', 'false');
        return;
      }

      const investorId = saveResult.investorId!;

      // Send form data to n8n webhook for AI executive summary generation
      const response = await fetch('https://n8n.srv880021.hstgr.cloud/webhook-test/CeoPremium', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'generate_executive_summary',
          timestamp: new Date().toISOString(),
          formData: data
        }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log('AI Executive Summary generated:', result);

        // Save analysis data to Supabase
        const analysisData = {
          analysis: {
            executive_summary: result.executiveSummary || result.summary || 'Summary will be generated by AI',
            critical_actions: result.critical_actions || []
          },
          metrics: result.metrics || {},
          next_30_days: result.next_30_days || []
        };

        await saveAnalysisData(investorId, analysisData);

        // Save form data with generated summary
        const dataWithSummary = {
          ...data,
          aiGeneratedSummary: analysisData.analysis.executive_summary,
          investorId // Store investor ID for future reference
        };

        setFormData(dataWithSummary);
        setCurrentScreen('dashboard');

        // Also save to localStorage as backup
        localStorage.setItem('portfolio_ceo_form_data', JSON.stringify(dataWithSummary));
        localStorage.setItem('portfolio_ceo_investor_id', investorId);
        localStorage.setItem('portfolio_ceo_first_time', 'false');
      } else {
        console.error('Error generating AI summary');
        // Still proceed to dashboard even if AI fails
        const dataWithId = { ...data, investorId };
        setFormData(dataWithId);
        setCurrentScreen('dashboard');
        localStorage.setItem('portfolio_ceo_form_data', JSON.stringify(dataWithId));
        localStorage.setItem('portfolio_ceo_investor_id', investorId);
        localStorage.setItem('portfolio_ceo_first_time', 'false');
      }
    } catch (error) {
      console.error('Error in form submission:', error);
      // Proceed to dashboard even if everything fails
      setFormData(data);
      setCurrentScreen('dashboard');
      localStorage.setItem('portfolio_ceo_form_data', JSON.stringify(data));
      localStorage.setItem('portfolio_ceo_first_time', 'false');
    }
  };

  switch (currentScreen) {
    case 'login':
      return <LoginScreen onLogin={handleLogin} />;
    case 'form':
      return <PropertyInvestmentForm onSubmit={handleFormSubmit} />;
    case 'dashboard':
      return <Dashboard formData={formData} />;
    default:
      return <LoginScreen onLogin={handleLogin} />;
  }
}

export default App;
